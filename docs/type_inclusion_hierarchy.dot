digraph typedeps {

nod -> assume_prove;
nod -> expr;
//nod -> ap_subst_in;
//nod -> def_step;
//nod -> op_arg;
//nod -> instance;
//nod -> new_symb;
//nod -> proof;
//nod -> formal_param;
//nod -> mule;
//nod -> op_decl;
//nod -> op_def;
//nod -> assume;
//nod -> theorem;
//nod -> use_or_hide;

expr -> at[color=red];
expr -> decimal;
expr -> label;
expr -> let_in;
expr -> numeral;
expr -> op_appl[color=red];
expr -> strng;
expr -> subst_in;
expr -> binder[color=red];

expr_or_op_arg -> expr[color=red];
expr_or_op_arg -> op_arg[color=red];

ap_subst_in -> subst;
ap_subst_in -> nod;

subst_in -> subst;
subst_in -> expr;


instance -> subst;
instance -> formal_param;

subst -> op_decl;
subst -> expr_or_op_arg;

assume -> expr;


theorem ->  assume_prove[color=red];
theorem ->  proof;


assume_prove -> new_symb ;
assume_prove -> assume_prove[color=red];
assume_prove -> expr[color=red];


new_symb ->  op_decl;
new_symb ->  expr;

op_def -> module_instance;
op_def -> user_defined_op;
op_def -> builtin_op;

user_defined_op -> expr;
user_defined_op -> formal_param;

lambda -> expr;
lambda -> formal_param;

builtin_op -> formal_param;

op_arg -> operator[color=red];

op_decl -> op_declkind;

proof -> omitted;
proof -> obvious;
proof -> by;
proof -> steps;

expr_or_module_or_module_instance -> expr;
expr_or_module_or_module_instance -> mule;
expr_or_module_or_module_instance -> module_instance;

defined_expr -> user_defined_op;
defined_expr -> module_instance;
defined_expr -> theorem;
defined_expr -> assume;

by -> expr_or_module_or_module_instance;
by -> defined_expr;


steps -> step;

step -> def_step;
step -> use_or_hide;
step -> instance;
step -> theorem;

def_step -> op_def;

use_or_hide -> expr_or_module_or_module_instance;
use_or_hide -> defined_expr;


op_appl_or_binder -> op_appl[color=red];
op_appl_or_binder -> binder[color=red];

at -> op_appl_or_binder[color=red];



label -> assume_prove;
label -> formal_param;

op_defor_theoremor_assume -> op_def;
op_defor_theoremor_assume -> theorem;
op_defor_theoremor_assume -> assume;

let_in -> expr;
let_in -> op_defor_theoremor_assume;

operator -> formal_param;
operator -> mule;
operator -> op_decl;
operator -> op_def;
operator -> theorem[color=red];
operator -> assume;
operator -> ap_subst_in;
operator -> lambda;

op_appl -> operator[color=red];
op_appl -> expr_or_op_arg[color=red];

binder -> operator[color=red];
binder -> expr_or_op_arg[color=red];
binder -> bound_symbol;

bound_symbol -> unbounded_bound_symbol;
bound_symbol -> bounded_bound_symbol;

unbounded_bound_symbol -> formal_param;
bounded_bound_symbol -> formal_param;
bounded_bound_symbol -> expr;



mule -> op_decl ;
mule -> op_decl ;
mule -> op_def  ;
mule -> assume  ;
mule -> theorem  ;

entry -> formal_param ;
entry -> mule ;
entry -> op_decl ;
entry -> op_def ;
entry -> theorem ;
entry -> assume ;
entry -> ap_subst_in;


context -> entry;
context -> mule;

}