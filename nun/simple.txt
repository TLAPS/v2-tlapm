Obligation 1:
BUILTIN_OP : ( TRUE )

Obligation 2:
BUILTIN_OP : ( FALSE )

Obligation 3:
ASSUME BUILTIN_OP : ( FALSE ) PROVE BUILTIN_OP : ( FALSE )

Obligation 4:
(1 BUILTIN_OP : ( = ) 1)

Obligation 5:
(1 BUILTIN_OP : ( = ) 2)

Obligation 6:
BUILTIN_OP : ( \E ) x \in BUILTIN_OP : ( $SetEnumerate )(0, 1) : ((x BUILTIN_OP : ( = ) 3))

Obligation 7:
BUILTIN_OP : ( \A ) x : ((x BUILTIN_OP : ( = ) x))

Obligation 8:
BUILTIN_OP : ( \A ) p, q : (((p BUILTIN_OP : ( => ) q) BUILTIN_OP : ( => ) BUILTIN_OP : ( \E ) i : (((((p BUILTIN_OP : ( => ) i) BUILTIN_OP : ( /\ ) (i BUILTIN_OP : ( => ) q)) BUILTIN_OP : ( /\ ) BUILTIN_OP : ( \lnot )((i BUILTIN_OP : ( => ) p))) BUILTIN_OP : ( /\ ) BUILTIN_OP : ( \lnot )((p BUILTIN_OP : ( => ) i))))))

Obligation 9:
ASSUME NEW S, NEW T, (BUILTIN_OP : ( $Tuple )(x, BUILTIN_OP : ( $Tuple )(y, z)) BUILTIN_OP : ( \in ) S) PROVE (BUILTIN_OP : ( $Tuple )(x, BUILTIN_OP : ( $Tuple )(y, z)) BUILTIN_OP : ( \in ) (S BUILTIN_OP : ( \union ) T))

Obligation 10:
ASSUME NEW S, NEW T, (BUILTIN_OP : ( $Tuple )(x, BUILTIN_OP : ( $Tuple )(y, z)) BUILTIN_OP : ( \in ) S) PROVE BUILTIN_OP : ( \E ) <<u, v>> \in S : ((BUILTIN_OP : ( $Tuple )(u, v) BUILTIN_OP : ( \in ) T))


